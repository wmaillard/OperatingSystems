#!/bin/bash

trap "rm -f $$*; exit 1" INT HUP TERM


arguments=( "$@" )
error="Usage: stats {-rows|-cols} [file]"
fileError="stats: cannot read "
rows=true
file=true




case "${arguments[0]}" in			# Checks to see if the options are for rows or columns
	 "-r"*)							# and sets the rows bool accordingly or returns an error
		rows=true ;;
	"-c"*)
		rows=false ;;
		*)
		echo $error 
		exit 1 ;;
esac

									# Checks to see if a filename is included and if so sets the
									# filename variable.  Otherwise creates a temp file with stdin data
									# Returns an error if too many variables.

case $# in
	1 )
		usingTemp=true
		cat /dev/stdin > "$$tempfile"
		filename="$$tempfile" ;;			
	2 )
		usingTemp=false
		filename="${arguments[1]}";;
	* )
		echo $error 
		exit 1 ;;
esac


									# If there is a problem reading the file, return an error
									
if ! [ -r "$filename" ]   
	then
		echo $fileError "$filename"
		exit 1
fi

# Read the data from either the file or STDIN

numLines=$(cat $filename | wc -l)


numFiles=0
numLines=0
if  [ $rows == true ]
	then
		i=0
		while read line 
			do
				j=0
				((i++))
				for num in $line
					do
					((j++))
					echo "$num" >> "$$tempData$i"

					# sort -t$'\t' -o "row$i" "row$i"
					done
				
			done < $filename
			numFiles=$i
			numItems=$j
			
	else
		sort -o sortedFile $filename 
		line=$(head -n 1 $filename)
		i=0;
											# Make a file for each column and sort it
		for column in $line
			do
				((i++))
				cut -d$'\t' -f$i < $filename > "$$tempData$i"
			done
		# echo this is the numean=(((sum+(numItems/2))/numItems))mber of items in a column: $i
		j=0
		while read line
			do
				((j++))
			done < "$$tempData1"
		echo
		numFiles=$i
		numItems=$j

			# expr 5 \* \( 4 + 2 \)
		
		

fi

i=1
while [ $i -le $numFiles ] 
	do
		sort -o "$$tempData$i" "$$tempData$i"
		((i++))
	done
		
mid=$((numItems/2+1))
i=1
if [ $rows == "true" ]
	then
		echo Average Median
	else
		echo Averages:
fi
while [ $i -le $numFiles ]
	do
		sum=0;
		j=1
		while read theLines
			do
			((sum+=theLines))
			
			if [ $j -eq $mid ]
				then
				if [ $rows == "false" ]
					then
					median=$theLines
					else
					median=$theLines
				fi
			fi
			((j++))
		done < "$$tempData$i"
		mean=$(((sum+(numItems/2))/numItems))
		if [ $rows == "false" ]
			then
				medians[$i]=$median
				printf "%d\t" $mean
			else
				printf "%d\t" $mean $median
				printf "\n"
		fi

	((i++))
	done
echo ""

if [ $rows == "false" ]
	then
		echo Medians:
		for meds in "${medians[@]}"
			do
			printf "%d\t" $meds
			done
	echo ""
fi

rm -f $$*




# { sum += $i; n++ } END { if (n > 0) print sum / n; -v var="$numLines"















