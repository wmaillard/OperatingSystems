#!/bin/bash

trap "rm -f $$*; exit 1" INT HUP TERM		# Remove temp files if program is interrupted


arguments=( "$@" )
error="Usage: stats {-rows|-cols} [file]"
fileError="./stats: cannot read "
rows=true
file=true




case "${arguments[0]}" in			# Checks to see if the options are for rows or columns
	 "-r"*)							# and sets the rows bool accordingly (for later use) or returns an error
		rows=true ;;
	"-c"*)
		rows=false ;;
		*)
		>&2 echo $error 
		exit 1 ;;
esac

									# Checks to see if a filename is included and if so sets the
									# filename variable.  Otherwise creates a temp file with stdin data.
									# This allows the same functions to run on either case, a file input
									# or STDIN input.
									# Returns an error if too many variables.

case $# in
	1 )
		usingTemp=true
		cat /dev/stdin > "$$tempfile"
		filename="$$tempfile" ;;			
	2 )
		usingTemp=false
		filename="${arguments[1]}";;
	* )
		>&2 echo $error 
		exit 1 ;;
esac


									# If there is a problem reading the file, return an error
									
if ! [ -r "$filename" ]   
	then
		>&2 echo $fileError "$filename"
		exit 1
fi

									# Read the data from the file (either given or created file)

numLines=$(cat $filename | wc -l)


numFiles=0
numLines=0
if  [ $rows == true ]
	then
		i=0
		while read line 
			do
				j=0
				((i++))
				for num in $line
					do
					((j++))
					echo "$num" >> "$$tempData$i"
					done
				
			done < $filename
			numFiles=$i
			numItems=$j
			
	else
		line=$(head -n 1 $filename)
		i=0;
											# Make a file for each column and sort it
											# This eliminates the need for difficult to follow
											# nested loops for locating data within columns
		for column in $line
			do
				((i++))
				cut -d$'\t' -f$i < $filename > "$$tempData$i"
			done
		if [ -f "$$tempData1" ]
			then
			j=0
			while read line
				do
					((j++))
				done < "$$tempData1"
			numItems=$j
		fi
		
		numFiles=$i
		
fi
												# Sort the contents of the files
												# so that we can find the median easily
i=1												
while [ $i -le $numFiles ] 
	do
		sort -n -o "$$tempData$i" "$$tempData$i"
		((i++))
	done
		
mid=$(((numItems/2)+1))							# Midpoint for median

i=1
if [ $rows == "true" ]							# On screen output for rows or columns
	then
		echo Average Median
	else
		echo Averages:
fi
while [ $i -le $numFiles ]
	do
		sum=0;
		j=1
		while read theLines						# Calculate the sum of each row or line
			do									# and catch the median when you pass it
			((sum+=theLines))
			if (( j == mid ))
				then
				if [ $rows == "false" ]
					then
					median=$theLines
				else
					median=$theLines
				fi
			fi
			((j++))
		done < "$$tempData$i"
		mean=$(((sum+(numItems/2))/numItems)) 	# Calculate the mean from the sum
												# Just formatting conditionals
		if [ $rows == "false" ]
			then
				medians[$i]=$median
				printf "%d\t" $mean
			else
				printf "%d\t" $mean $median
				printf "\n"
		fi

	((i++))
	done
echo ""
												# More formatting
if [ $rows == "false" ]
	then
		echo Medians:
		for meds in "${medians[@]}"
			do
			printf "%d\t" $meds
			done
		printf "\n"
fi

rm -f $$* 										# Remove temp files
